name: ChatBot Prototype CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: chatbot-saas
  TEARDOWN_ON_SUCCESS: "false"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r cli/requirements.txt
        pip install -r backend/lambdas/requirements.txt
    
    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --tb=short
    
    - name: Lint Python code
      run: |
        pip install flake8
        flake8 backend/lambdas/ cli/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics

  validate-terraform:
    name: Validate Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
    
    - name: Terraform Format Check
      run: |
        cd terraform
        terraform fmt -check
    
    - name: Terraform Init
      run: |
        cd terraform
        terraform init -backend=false
    
    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: [test, validate-terraform]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Package Lambda function
      run: |
        cd backend/lambdas
        zip -r ../../terraform/chat_handler.zip . -x "*.pyc" "*__pycache__*"
    
    - name: Deploy infrastructure
      run: |
        cd terraform
        terraform init
        terraform plan -out=tfplan
        terraform apply -auto-approve tfplan
    
    - name: Get deployment outputs
      id: terraform_output
      run: |
        cd terraform
        echo "api_gateway_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
        echo "lambda_function_name=$(terraform output -raw lambda_function_name)" >> $GITHUB_OUTPUT
        echo "sagemaker_endpoint_name=$(terraform output -raw sagemaker_endpoint_name)" >> $GITHUB_OUTPUT
    
    - name: Wait for SageMaker endpoint
      run: |
        ENDPOINT_NAME="${{ steps.terraform_output.outputs.sagemaker_endpoint_name }}"
        echo "Waiting for SageMaker endpoint: $ENDPOINT_NAME"
        
        max_attempts=30
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          STATUS=$(aws sagemaker describe-endpoint --endpoint-name $ENDPOINT_NAME --query 'EndpointStatus' --output text)
          echo "Attempt $attempt/$max_attempts - Endpoint status: $STATUS"
          
          if [ "$STATUS" = "InService" ]; then
            echo "‚úÖ SageMaker endpoint is ready!"
            break
          elif [ "$STATUS" = "Failed" ]; then
            echo "‚ùå SageMaker endpoint deployment failed"
            exit 1
          fi
          
          sleep 60
          attempt=$((attempt + 1))
        done
        
        if [ $attempt -gt $max_attempts ]; then
          echo "‚ùå Timeout waiting for SageMaker endpoint"
          exit 1
        fi
    
    - name: Warm up endpoint via Lambda
      run: |
        LAMBDA_FUNCTION_NAME="${{ steps.terraform_output.outputs.lambda_function_name }}"
        echo "Warming up Lambda: $LAMBDA_FUNCTION_NAME"
        aws lambda invoke \
          --function-name "$LAMBDA_FUNCTION_NAME" \
          --payload '{"message":"warmup","session_id":"warmup"}' \
          --cli-binary-format raw-in-base64-out \
          warmup_response.json >/dev/null 2>&1 || true
        cat warmup_response.json || true
        rm -f warmup_response.json || true
    
    - name: Test deployment
      run: |
        API_URL="${{ steps.terraform_output.outputs.api_gateway_url }}"
        echo "Testing API at: $API_URL"
        
        http_code=$(curl -s -m 25 -o response.txt -w "%{http_code}" -X POST "$API_URL/chat" \
          -H "Content-Type: application/json" \
          -d '{"message":"Hello, this is a CI/CD test","session_id":"ci-test-123"}')
        echo "Status Code: $http_code"
        echo "Response: $(cat response.txt)"
        
        if [ "$http_code" -eq 200 ]; then
          echo "‚úÖ API test passed!"
        else
          echo "‚ùå API test failed!"
          exit 1
        fi
    
    - name: Deployment summary
      run: |
        echo "üéâ Deployment completed successfully!"
        echo "üìä Deployment Information:"
        echo "   API Gateway URL: ${{ steps.terraform_output.outputs.api_gateway_url }}"
        echo "   Lambda Function: ${{ steps.terraform_output.outputs.lambda_function_name }}"
        echo "   SageMaker Endpoint: ${{ steps.terraform_output.outputs.sagemaker_endpoint_name }}"
        echo ""
        echo "üîó Test the CLI:"
        echo "   git clone <repo> && cd chatbot-saas-prototype"
        echo "   export API_GATEWAY_URL=${{ steps.terraform-output.outputs.api_gateway_url }}"
        echo "   cd cli && python3 chatbot_cli.py"

    - name: Tear down infrastructure on success (optional)
      if: env.TEARDOWN_ON_SUCCESS == 'true'
      run: |
        cd terraform
        terraform destroy -auto-approve
        echo "üßπ Destroyed infra after successful test"

  cleanup-on-failure:
    name: Cleanup on Failure
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
    
    - name: Cleanup failed deployment
      run: |
        cd terraform
        terraform init
        terraform destroy -auto-approve
        echo "üßπ Cleaned up failed deployment"